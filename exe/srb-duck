#!/usr/bin/env ruby
# typed: ignore

require 'bundler/setup'
require 'sorbet_duck'
require 'parlour'

# Find all Duck interfaces
interfaces = SorbetDuck::DuckDefinitionFinder.find_all_definitions

# Create a new RBI with the "duck" method
gen = Parlour::RbiGenerator.new(
  break_params: 4,
  tab_size: 2,
)
gen.root.create_method('duck', parameters: [
  Parlour::RbiGenerator::Parameter.new('interface_name', type: 'Symbol'),
  Parlour::RbiGenerator::Parameter.new('method_name', type: 'Symbol'),
  Parlour::RbiGenerator::Parameter.new('&blk', type: 'T.proc.bind(T::Private::Methods::DeclBuilder).returns(T.untyped)')
])
interfaces.each { |interface| interface.add_definition_to_namespace(gen.root) }

# Write now so that the constants actually resolve
File.write('duck.rb', gen.rbi('true'))

# Implement interfaces on types where it's needed and rewrite types
SorbetDuck::InterfaceImplementer.implement(
  gen.root,
  interfaces
)
File.write('duck.rb', gen.rbi('true'))